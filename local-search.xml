<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>C Language Points</title>
    <link href="/2022/12/13/C-Language-Points/"/>
    <url>/2022/12/13/C-Language-Points/</url>
    
    <content type="html"><![CDATA[<h2 id="第一章、C语言的背景"><a href="#第一章、C语言的背景" class="headerlink" title="第一章、C语言的背景"></a>第一章、C语言的背景</h2><h3 id="一、C语言的起源"><a href="#一、C语言的起源" class="headerlink" title="一、C语言的起源"></a>一、C语言的起源</h3><p>1972年由贝尔实验室的 Dennis Ritchie 和Ken Thompson 在开发Unix系统的基础上开发的C语言。</p><h3 id="二、C语言流行的原因"><a href="#二、C语言流行的原因" class="headerlink" title="二、C语言流行的原因"></a>二、C语言流行的原因</h3><ul><li><strong>设计特性</strong>：融合了计算机科学理论和实践的控制特性。其设计理念能够使得用户能够轻松完成自顶向下的规划、结构化编程和模块化设计。</li><li><strong>高效性</strong>：充分调动计算机资源，使得C程序更加的紧凑，且运行速度更快，具备了汇编语言才具有的微调控制能力。也能够通过指针直接操作内存。</li><li><strong>可移植性</strong>：这意味着，在一种系统中编写的C程序稍作修改或者不修改就可以在其他系统上运行。</li><li><strong>强大而灵活</strong>：例如Unix系统就是使用C语言进行编写的。还有很多其他语言的许多编译器与解释器都是使用C语言编写的。</li><li><strong>面向程序员</strong>：其是为了满足程序员的需求而设计的，程序员利用C可以访问硬件、操作内存中的位。C语言有丰富的运算符，能够让程序员简洁的表达自己的意图。</li><li><strong>缺点</strong>：C语言使用指针，而涉及指针的编程错误往往难以察觉。</li></ul><h3 id="三、C语言的应用范围"><a href="#三、C语言的应用范围" class="headerlink" title="三、C语言的应用范围"></a>三、C语言的应用范围</h3><p>二十世纪八十年代开始，C语言就已经成为小型计算机Unix的主流语言，从那以后，C语言的使用范围就逐渐扩大到微型机和大型机上。主要的原因是由于C语言编写的程序紧凑而高效，更重要是很方便修改，移植到新版本的计算机上问题也不大。</p><h3 id="四、高级计算机语言和编译器"><a href="#四、高级计算机语言和编译器" class="headerlink" title="四、高级计算机语言和编译器"></a>四、高级计算机语言和编译器</h3><p>高级程序语言简化了编程工作，首先是不需要使用指令码表示指令，其次使用的指令更贴近你如何想这个问题，而不是计算机内部的繁琐的步骤，简单的说就是高级语言的目的就是站在人的角度上思考问题，而不是站在计算机的角度上思考问题。</p><p>编译器就是将高级语言程序翻译成计算机能够理解的机器语言指令集的程序。</p><p>简而言之，高级语言就是以更抽象的方式描述行为，不受限于特性的CPU或者指令集，同时高级语言也更加易学，用高级语言编程比用机器语言编程容易的多。</p><h3 id="五、语言标准"><a href="#五、语言标准" class="headerlink" title="五、语言标准"></a>五、语言标准</h3><ul><li>1987年 Brian Kernighan和Dennis Ritchie 编写的 The C Programming Language 是公认的第一版C标准。但是其没有定义C库。</li><li><strong>第一个ANSI&#x2F;ISO C标准</strong>：ANSI与1983组建了一个委员会 X3J11 开发了一套标准。1989年颁布为ANSI C，成为C89标准。1990年，国际标准化组织采用ANSI C颁布了ISO C标准，称为C90.</li><li><strong>C99标准：</strong>1994年，ANSI 和 ISO联合委员会开始修订C标准，并最终发布了C99.</li></ul><h3 id="六、使用C语言的七个步骤"><a href="#六、使用C语言的七个步骤" class="headerlink" title="六、使用C语言的七个步骤"></a>六、使用C语言的七个步骤</h3><ol><li><strong>定义程序的目标：</strong>在开发程序之前，脑海中要有清晰的思路。想要程序去做什么首先要明确自己想做什么，思考你的程序需要哪些信息，要进行哪些计算和控制，以及程序应该要报告什么信息。在这一步骤中，不涉及具体的计算机语言，仅用一般术语来描述问题。</li><li><strong>设计程序：</strong>对程序应该完成什么任务有概念性的认识后，就应该考虑如何用程序来完成它。例如用户界面应该是怎么样的？如何组织程序？目标用户是谁？准备花多长时间来完成？除此之外还要决定在程序中如何表示数据？以及用什么方式处理数据？</li><li><strong>编写代码：</strong>设计好程序之后，就可以编写代码来实现它。也就是说，把你设计的程序翻译成C语言，这也是真正需要使用到C语言的地方。</li><li><strong>编译：</strong>编译的细节取决于编程的环境。C编译器负责把C代码翻译成特定的机器语言。此外，C编译器还将源代码与C库的代码一起合并为最终的程序。</li><li><strong>运行程序：</strong>最终生成的程序可通过单击或双击文件名或图标直接在操作系统中运行。</li><li><strong>测试和调试程序：</strong>查找并修复程序错误的过程叫做调试。</li><li><strong>维护和修改代码：</strong>创建完程序之后，发现程序有错，或者想扩展程序的功能，这时候就要修改程序。</li></ol><h3 id="七、编程机制"><a href="#七、编程机制" class="headerlink" title="七、编程机制"></a>七、编程机制</h3><ul><li>一开始编写C程序时，编写的内容被储存在文本文件中，该文件被称为源代码文件。大部分C系统都是以  .c 结尾。</li><li>C编程的基本策略是：用程序把源代码文件转换为可执行文件（包含可直接运行的机器语言代码），典型的C实现通过编译和链接两个步骤来完成这一过程。编译器把源代码转换成中间代码，链接器把中间代码和其他代码合并，生成可执行文件。C使用这种分而治之的方法方便对程序进行模块化，也可以编译单独的模块。</li><li>中间文件有多种形式，我们在这里描述的最普遍的一种形式，即把源代码转换为机器语言代码，并把结构放在目标代码文件中。</li><li>Unix系统：C语言因Unix系统而生，也因此而流行。</li><li>Linux系统：是一个开源、流行、类Unix的系统，可在不同平台运行。</li><li>集成开发环境：Windows上提供了很多的集成开发环境。统称为IDE。流行的有VS,CLion等。</li></ul><h3 id="八、Test"><a href="#八、Test" class="headerlink" title="八、Test"></a>八、Test</h3><ol><li>对编程而言，可移植性意味着什么？</li><li>解释性代码文件，目标代码文件和可执行文件有什么区别？</li><li>编程的七个主要步骤是什么？</li><li>编译器的任务是什么？</li><li>链接器的任务是什么</li></ol><hr><h2 id="第二章、C语言概述"><a href="#第二章、C语言概述" class="headerlink" title="第二章、C语言概述"></a>第二章、C语言概述</h2><h3 id="一、简单的C程序示例"><a href="#一、简单的C程序示例" class="headerlink" title="一、简单的C程序示例"></a>一、简单的C程序示例</h3><figure class="highlight c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> num = <span class="hljs-number">1</span>;   <span class="hljs-comment">//定义一个整形变量num并赋值1</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;I am a simple!&quot;</span>);<span class="hljs-comment">//使用printf进行打印输出</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;computer.\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;My favorite number is %d because it is first.\n&quot;</span>,num);<br>    <br>    getchar();   <span class="hljs-comment">//等待输入按键后关闭窗口</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="声明变量的意义"><a href="#声明变量的意义" class="headerlink" title="声明变量的意义"></a>声明变量的意义</h4><ul><li>把所有的变量都放在一处，方便查找和理解程序的用途。如果变量名都是有意义的，这样做效果会更好。如果部分变量名无法表达清楚，在注释中解释变量的含义，这样程序的可读性更高。</li><li>声明变量会促使你在编写程序之前做一些计划。在程序开始时要获得哪些信息？希望程序如何输出？表示数据最好的方式是什么？</li><li>声明变量有助于发现隐藏在程序中的小错误，如变量名拼写错误。</li><li>C99之前的标准要求把声明都置于块的顶部，这样规定的好处是：把声明都放在一起更容易理解程序的用途。而C99标准允许在需要变量时才声明变量，这样做的好处是：在给变量赋值之前声明变量，就不会忘记给变量赋值。</li></ul><h4 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h4><p>赋值是C语言的基本操作之一。赋值语句的意义就把右边的值放在左边所声明的变量的空间之中。</p><h3 id="二、提高程序可读性的技巧"><a href="#二、提高程序可读性的技巧" class="headerlink" title="二、提高程序可读性的技巧"></a>二、提高程序可读性的技巧</h3><ol><li>选择有意义的函数名和写注释，但是使用这两种技巧时应该相得益彰，避免啰嗦。</li><li>在函数中用空行分隔概念上的多个部分。</li><li>每条语句各占一行。</li></ol><h3 id="三、多个函数"><a href="#三、多个函数" class="headerlink" title="三、多个函数"></a>三、多个函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">World</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>；<span class="hljs-comment">//函数原型</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><span class="hljs-comment">//此函数输出Hello</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello\t&quot;</span>);<br>    World();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>；<br>&#125;<br><br><span class="hljs-type">void</span> World(<span class="hljs-type">void</span>)<span class="hljs-comment">//此函数输出World</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;World!\n&quot;</span>);<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>在上文代码中，World出现了三次。第一次是函数原型，告知编译器在程序中要使用该函数，第二次以函数调用的形式出现在 main() 函数中，最后一次出现在函数定义中，函数定义即是函数本身的源代码。</p><h3 id="四、程序状态"><a href="#四、程序状态" class="headerlink" title="四、程序状态"></a>四、程序状态</h3><p>通过逐步跟踪程序的执行步骤，并记录每个变量，便可监视程序的状态。程序状态是在程序的执行过程中，某给定点上所有变量值的几集合。</p><p>跟踪程序状态的方法：如果循环有非常多次，观察一小部分循环，是否按照预期的方式执行。另外还要根据实际写出来的代码与运行程序，而不是根据自己的所想进行程序的运行。所以要尽量忠实代码来进行模拟。</p><p>定义语义错误的另一种方法是：在程序的关键点插入额外的 printf 语句，以监视变量值的变化。</p><p>最后一种方法是使用调试器。调试器是一种程序，让你一步一步的运行另一个程序，并检查该程序的变量值。</p><h3 id="五、关键字和保留字符"><a href="#五、关键字和保留字符" class="headerlink" title="五、关键字和保留字符"></a><strong>五、关键字和保留字符</strong></h3><p>关键字是C语言的词汇。关键字对于C语言来说比较特殊，因为其不能够作为标识符使用。许多关键字用于指定不同的类型，比如说 int 和 float 等，还有一些关键字用于控制程序中的语句执行顺序。下表中，粗体表示C90新增的关键字，斜体表示C99标准新增的关键字，粗斜体表示C11中新增的关键字。</p><table><thead><tr><th align="center">auto</th><th align="center">extern</th><th align="center">short</th><th align="center"><strong>while</strong></th></tr></thead><tbody><tr><td align="center">break</td><td align="center">float</td><td align="center"><strong>signed</strong></td><td align="center"><em><strong>_Alignas</strong></em></td></tr><tr><td align="center">case</td><td align="center">for</td><td align="center">sizeof</td><td align="center"><em><strong>_Alignof</strong></em></td></tr><tr><td align="center">char</td><td align="center">goto</td><td align="center">static</td><td align="center"><em><strong>_Atomic</strong></em></td></tr><tr><td align="center">const</td><td align="center">if</td><td align="center">struct</td><td align="center"><em><strong>_Bool</strong></em></td></tr><tr><td align="center">continue</td><td align="center">inline</td><td align="center">switch</td><td align="center"><em><strong>_Complex</strong></em></td></tr><tr><td align="center">default</td><td align="center">int</td><td align="center">typedef</td><td align="center"><em><strong>_Generic</strong></em></td></tr><tr><td align="center">do</td><td align="center">long</td><td align="center">union</td><td align="center"><em><strong>_Imaginary</strong></em></td></tr><tr><td align="center">double</td><td align="center">register</td><td align="center">unsigned</td><td align="center"><em><strong>_Noreturn</strong></em></td></tr><tr><td align="center">else</td><td align="center">restrict</td><td align="center">void</td><td align="center"><em><strong>_Static_assert</strong></em></td></tr><tr><td align="center"><strong>enum</strong></td><td align="center">return</td><td align="center"><strong>volatile</strong></td><td align="center"><em><strong>_Thread_local</strong></em></td></tr></tbody></table><h3 id="六、关键概念"><a href="#六、关键概念" class="headerlink" title="六、关键概念"></a>六、关键概念</h3><p>对于编程人员来说，要具备抽象和逻辑的思维，并谨慎的处理细节问题。应该理解什么是C程序，可以把程序看做是你希望计算机如何完成任务的描述。编译器负责具体的细节工作。</p><h3 id="七、Test"><a href="#七、Test" class="headerlink" title="七、Test"></a>七、Test</h3><h4 id="（一）、基础测试"><a href="#（一）、基础测试" class="headerlink" title="（一）、基础测试"></a>（一）、基础测试</h4><ol><li><p>C语言的基本模块是什么？</p></li><li><p>什么是语法错误？写出一个英语例子和C语言例子？</p></li><li><p>什么是语义错误？写出一个英语例子和C语言例子？</p></li><li><p>Indiana Sloth 编写了下面的程序，并征求你的意见，请帮助他评定。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c">include studio.h<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><span class="hljs-comment">//该程序打印一年有多少周</span><br>&#123;<br>    <span class="hljs-type">int</span> s<br>    <br>    s := <span class="hljs-number">56</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;There are s weeks in a year.&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>假设下面的4个例子都是完整程序中的一部分，它们都输出什么结果？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">printf</span>（<span class="hljs-string">&quot;Baa Baa Black Sheep.&quot;</span>）;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Have you any wool?\n&quot;</span>);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Begone!\n O creature of lard!\n&quot;</span>);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;What?\n No/n fish?\n&quot;</span>);<br><br><span class="hljs-type">int</span> num;<br>num = <span class="hljs-number">2</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d + %d = %d&quot;</span>,num,num,num+num);<br></code></pre></td></tr></table></figure></li><li><p>在 main int function char &#x3D; 中，哪些是C语言的关键字？</p></li><li><p>如何以下面的格式输出变量 words 和 lines 的值 （这里，3020和350代表两个变量的值？）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">There were <span class="hljs-number">3020</span> words and <span class="hljs-number">350</span> lines。<br></code></pre></td></tr></table></figure></li><li><p>考虑下面的程序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">int</span> x,y;<br>    x = <span class="hljs-number">10</span>;<br>    y = <span class="hljs-number">5</span>;<span class="hljs-comment">//第六行</span><br>    y = x+y;<span class="hljs-comment">//第七行</span><br>    x = x*y;<span class="hljs-comment">//第八行</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>,x,y);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>请问在执行完第六、七 、八行之后，程序的状态分别是什么？</p></li></ol><h4 id="（二）、编程练习"><a href="#（二）、编程练习" class="headerlink" title="（二）、编程练习"></a>（二）、编程练习</h4><ol><li><p>编写一个程序，调用一次 printf 函数，把你的姓名打印在第一行。再调用一次 printf 函数，把你的姓名分别打印在两行，然后再调用两次 printf 函数，把你的姓名打印在一行。输出应该如下所示。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">Gustav Mahler<span class="hljs-comment">//第一次打印的内容</span><br>Gustav    <span class="hljs-comment">//第二次打印的内容</span><br>Mahler<span class="hljs-comment">//仍然是第二次打印的内容</span><br>Gustav Mahler<span class="hljs-comment">//第三次和第四次打印的内容</span><br></code></pre></td></tr></table></figure></li><li><p>编写一个程序，打印你的姓名和地址。</p></li><li><p>编写一个程序把你的年龄转换成天数，并显示这两个值。这里不用考虑闰年的问题。</p></li><li><p>编写一个程序生成以下输出：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">For</span> h<span class="hljs-string">e&#x27;s a jolly good fellow!</span><br><span class="hljs-string">For he&#x27;</span>s a jolly good fellow!<br><span class="hljs-keyword">For</span> h<span class="hljs-string">e&#x27;s a jolly good fellow!</span><br><span class="hljs-string">Which nobody can deny!</span><br></code></pre></td></tr></table></figure><p>除了 main() 函数以外，该程序还要调用两个自定义函数，一个名为 jolly() 用于打印前三条消息，调用一次打印一条；另一个函数名为 deny() ，打印最后一条消息。</p></li><li><p>编写一个程序，生成以下输出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">Brazil, Russia, India, China<br>India, China<br>Brazil, Russia<br></code></pre></td></tr></table></figure><p>除了 main() 函数以外，该程序还要调用两个自定义的函数，一个名为 br() ，调用一次打印一次“Brazil, Russia”；另一个名为 ic()，调用一次打印一次“India，China”。其他内容在 main() 函数中完成。</p></li><li><p>编写一个程序，创建一个整形变量 toes，并将 toes 设置为10。程序还要计算toes的两倍和toes的平方。该程序打印三个值，分别描述以示区分。</p></li><li><p>许多研究表明，微笑益处多多。编写一个程序，生成以下格式的输出</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">Smile！Smile！Smile！<br>Smile！Smile！<br>Smile！<br></code></pre></td></tr></table></figure><p>该程序要定义一个函数，该函数被调用一次打印一次 “Smile！”，根据程序的需要使用该函数。</p></li><li><p>在C语言中，函数可以调用另一个函数。编写一个程序，调用一个名为 one_three() 的函数。该函数在一行打印单词“one”，再调用第二个函数 two() ，然后在另一行打印单词 “three”。two() 函数在一行显示单词 “two”。main() 函数在调用 one_three() 函数前要打印短语 “starting now：”，并在调用完毕后显示短语“done！”。因此该程序的输出应如下所示。</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">starting now：<br><span class="hljs-literal">one</span><br><span class="hljs-literal">two</span><br><span class="hljs-literal">three</span><br>done！<br></code></pre></td></tr></table></figure><hr></li></ol><h2 id="第三章、数据和C"><a href="#第三章、数据和C" class="headerlink" title="第三章、数据和C"></a>第三章、数据和C</h2><p>Introduction：本章介绍：</p><ul><li>关键字：int short long unsigned char float double <em>Bool</em> _Complex _Imaginary </li><li>运算符：sizeof()</li><li>函数：scan（）</li><li>整数类型和浮点数类型的区别</li><li>如何书写整形和浮点型常数，如何声明这些类型的变量</li><li>如何使用printf（）和scanf（）函数读取不同类型的值</li></ul><h3 id="一、示例程序"><a href="#一、示例程序" class="headerlink" title="一、示例程序"></a>一、示例程序</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">float</span> weight; <span class="hljs-comment">//你的体重</span><br><span class="hljs-type">float</span> value;<span class="hljs-comment">//相等重量的白金的价值</span><br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Are you worth your weight in platiume?\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Let&#x27;s check it out.\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Please enter your weight in pounds&quot;</span>);<br>    <br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%f&quot;</span>,&amp;weight);<span class="hljs-comment">//获取用户的输入</span><br>    <span class="hljs-comment">/*假设白金的价值是每盎司$1700，,14.5833用于把英镑常衡盎司转换为金衡盎司*/</span><br>    value  = <span class="hljs-number">1700.0</span> *weight *<span class="hljs-number">14.5833</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Your weight in platinum is worth $%.2f.\n&quot;</span>,value);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;You are easily worth that! If platinum prices drop.\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;eat more to maintain your value.\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="程序中的新元素"><a href="#程序中的新元素" class="headerlink" title="程序中的新元素"></a>程序中的新元素</h4><ul><li>出现了 float 类型的变量，可以储存带小数的变量</li><li>打印输出的变化：使用%f来输出小数类型的变量，%.2f是指只输出小数点后两位的数据。</li><li>scanf() 用于获取键盘的输入值。%f说明需要读取用户从键盘输入的浮点数值。&amp;weight说明把scanf() 输入的值赋值给名为weight的变量。</li></ul><h3 id="二、常量与变量"><a href="#二、常量与变量" class="headerlink" title="二、常量与变量"></a>二、常量与变量</h3><p>例如π等一下具有固定数值的数据都是常量（constant），本程序中例如weight这种都是变量（variable）。</p><h3 id="三、数据类型和关键字"><a href="#三、数据类型和关键字" class="headerlink" title="三、数据类型和关键字"></a>三、数据类型和关键字</h3><p>在C语言中，不同的数据类型之间也有差异。一些数据类型表示数字，一些数据类型表示字符。C通过识别一些基本的数据类型来区分和使用这些不同的数据类型。对于常量，通过用户的书写形式来识别类型，例如42是int型，42.0就是float型。但是对于变量而言，需要在声明时指定其数据类型。</p><table><thead><tr><th align="center">最初K&amp;R给出的关键字</th><th align="center">C90标准添加的关键字</th><th align="center">C99标准添加的关键字</th></tr></thead><tbody><tr><td align="center">int</td><td align="center">signed</td><td align="center">_Bool</td></tr><tr><td align="center">long</td><td align="center">void</td><td align="center">_Complex</td></tr><tr><td align="center">short</td><td align="center"></td><td align="center">_Imaginary</td></tr><tr><td align="center">unsigned</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">char</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">float</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">double</td><td align="center"></td><td align="center"></td></tr></tbody></table><p>在C语言中，用int关键字来表示基本的数据类型。后三个关键字（long short 和 unsigned）和C90新增的 signed 用于提供基本整数类型的变式。例如unsigned short int 和 long long int . char 关键字用于指定字母和其他字符（如：# $ % *）另外，char类型也可以表示较小的整数。float，double和long double表示带小数点的数。_Bool 类型表示布尔值（true 或 false）, _complexhe _Imaginary 分别表示复数和虚数。</p><p>通过这些关键字创建的类型，按计算机的储存方式可分为两大基本类型：整数类型和浮点数类型。</p><h5 id="tips：位、字节和字"><a href="#tips：位、字节和字" class="headerlink" title="tips：位、字节和字"></a>tips：位、字节和字</h5><ul><li>位，字节和字是描述计算机数据单元或储存单元的术语，这里主要指储存单元。</li><li>最小的储存单元是位（bit），可以储存 0 或 1 ，也或者说用户设置开或关。虽然一位的储存信息有限，但是计算机中的位的数量十分庞大。位是计算机内存的基本构建块。</li><li>字节（byte）是常用的计算机储存单位，对于几乎所有的机器，1字节均为8位，这是字节的标准定义。</li><li>字是设计计算机时给定的自然储存单位，对于8位的微型计算机，1个字长只有8位，从那以后个人计算机字长逐渐增长为：16位，32位，64位。计算机字长越大，其数据转移越快，允许的内存访问也就更多。</li></ul><h5 id="整数和浮点数"><a href="#整数和浮点数" class="headerlink" title="整数和浮点数"></a>整数和浮点数</h5><p>对于编程人员而言，整数和浮点数的区别是它们的书写方式不同，但是对于计算机而言，它们的区别是储存方式不同。</p><ul><li>整数没有小数部分</li><li>浮点数可以表示的范围比整数更大</li><li>对于一些算数运算，浮点数损失的精度更多</li><li>因为在任何区间内，都存在无穷多个数，所以计算机的浮点数不能表示区间内所有的值。浮点数通常只是实际值的近似值。</li><li>以前浮点运算一般都比整数运算慢，但是现在许多CPU都包含了浮点处理器，缩小了速度上的差距。</li></ul><h3 id="四、C语言的基本数据类型"><a href="#四、C语言的基本数据类型" class="headerlink" title="四、C语言的基本数据类型"></a>四、C语言的基本数据类型</h3><h4 id="（一）int类型"><a href="#（一）int类型" class="headerlink" title="（一）int类型"></a>（一）int类型</h4><p>C语言中的整数类型可以表示不同的取值范围和正负值。一般情况下使用int类型就可以了，但是为了满足特定的任务和机器的要求，还可以选择其他的类型。</p><p>int类型是有符号整形，即int类型的值必须是整数，可以是正整数、负整数或者是零。int型所占用的值取决于一个机器字长。</p><h5 id="1、声明int类型"><a href="#1、声明int类型" class="headerlink" title="1、声明int类型"></a>1、声明int类型</h5><p>共有两种方式,可以单独声明每个变量，也可以在 int 后面声明多个变量名，变量名之间使用逗号分隔。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> erns;<br><span class="hljs-type">int</span> hogs,cows,goats;<br></code></pre></td></tr></table></figure><h5 id="2、初始化变量"><a href="#2、初始化变量" class="headerlink" title="2、初始化变量"></a>2、初始化变量</h5><p>就是为变量赋一个初始值。在C语言中，初始化可以在声明中完成。只需要在变量名后面加上赋值运算符（&#x3D;），和所需要赋的值即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> hogs = <span class="hljs-number">21</span>;<br><span class="hljs-type">int</span> cows = <span class="hljs-number">32</span>, goats = <span class="hljs-number">14</span>;<br><span class="hljs-type">int</span> dogs, cats = <span class="hljs-number">94</span>;<span class="hljs-comment">//可以但是不推荐</span><br></code></pre></td></tr></table></figure><h5 id="3、int型常量和打印的方法"><a href="#3、int型常量和打印的方法" class="headerlink" title="3、int型常量和打印的方法"></a>3、int型常量和打印的方法</h5><p>C语言把不含小数点和指数的数作为整数。C语言把大多数整形常量视为 int 类型，但是非常大的整数除外。</p><p>可以使用 printf 函数打印 int 类型的值。主要使用 %d ，此符号称为转换说明，它制定了printf() 应使用什么格式来显示这一个值。格式化字符串中的每个%d都与待打印的变量列表中相应的int值匹配。</p><h5 id="4、显示八进制和十六进制"><a href="#4、显示八进制和十六进制" class="headerlink" title="4、显示八进制和十六进制"></a>4、显示八进制和十六进制</h5><p>在C语言中，即可以使用和显示不同进制的数，不同的进制要使用不同的转换说明。<strong>以十进制显示数字，使用&amp;d；以八进制显示数字，使用%o；以十六进制显示数字，使用%x。另外，要显示个进制数的前缀 0， 0x， 0X，必须分别使用 %#o, %#x, %#X。</strong></p><h5 id="5、其他整数类型"><a href="#5、其他整数类型" class="headerlink" title="5、其他整数类型"></a>5、其他整数类型</h5><ul><li><p>short int 类型占用的储存空间可能比int类型少，常用于较小数值的场合以节省控件。与int相似，但是short是有符号类型。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">short</span> <span class="hljs-type">int</span> tags；<br><span class="hljs-type">short</span> tags；<span class="hljs-comment">//int 可省略</span><br></code></pre></td></tr></table></figure></li><li><p>long int 或long占用的储存空间可能比 int 多，适用于较大数值的场合。与int相似，long是有符号类型。</p></li><li><p>long long int或long long占用的储存空间可能比long 多，适用于更大数值的场景。该类型至少占用64位，该类型是有符号类型。</p></li><li><p>unsigned int 或者 unsigned 只用于非负值的场合。这种类型与有符号类型表示的范围不同。如unsigned int 表示0~65535，而不是-32768-32767。</p></li></ul><h4 id="（二）、使用多种类型整数类型的原因"><a href="#（二）、使用多种类型整数类型的原因" class="headerlink" title="（二）、使用多种类型整数类型的原因"></a>（二）、使用多种类型整数类型的原因</h4><ul><li>为什么说 short 类型可能比 int 类型占用的字节少，long类型可能比 int 类型占用的空间多？因为C语言只规定了short占用的储存空间不能多于int，long的储存空间不能少于int，这样的规定是为了适应不同类型的机器。</li><li>现在，个人计算机上常见的设置是，long long占64位，long占32位，short占16位，int占16位或32位。</li><li>int类型那么多，应该如何选择？首先，考虑unsigned类型。，这种类型的数常用于计数，因为计数不用负数。而且，unsigned类型可以表示更大的正数。如果一个数超出了int类型的取值范围，且在long类型的取值范围内时，使用long类型。然而，对于那些long占用的空间比int大的系统，使用long类型会减慢运算速度。因此，如非必要，请不要使用long类型。另外要注意一点：如果在long类型和int类型占用空间相同的机器上编写代码，当确实需要32位的整数时，应使用long类型而不是int类型，以便把程序移植到16位机后仍然可以正常工作。类似地，如果确实需要64位的整数，应使用longlong类型。如果在int设置为32位的系统中要使用16位的值，应使用short类型以节省存储空间。通常，只有当程序使用相对于系统可用内存较大的整型数组时，才需要重点考虑节省空间的问题。使用short类型的另一个原因是，计算机中某些组件使用的硬件寄存器是16位。</li><li>需要注意数据超出对应类型的表示范围所造成的数据溢出情况。</li></ul><h4 id="（三）、打印short、long、long-long和unsigned类型"><a href="#（三）、打印short、long、long-long和unsigned类型" class="headerlink" title="（三）、打印short、long、long long和unsigned类型"></a>（三）、打印short、long、long long和unsigned类型</h4><ul><li>打印unsigned int类型的值，使用%u转换说明</li><li>打印long类型的值，使用%ld转换说明。</li><li>如果系统中int和long的大小相同时，使用%d就可以。但是需要注意，这样一直到其他系统中可能无法正常使用。</li><li>%lx 表示以十六进制格式打印long类型整数</li><li>%lo 表示以八进制格式打印long类型整数</li><li>对于short类型，可以使用h前缀，</li><li>%hd 表示以十进制显示short类型的整数</li><li>%ho 表示以八进制显示short类型的整数</li><li>%lu 表示打印unsigned long 类型的值</li></ul><h4 id="（四）、char-类型和声明"><a href="#（四）、char-类型和声明" class="headerlink" title="（四）、char 类型和声明"></a>（四）、char 类型和声明</h4><p>char类型用于储存字符，但是从技术层面看，char是整数类型。因为char类型实际上储存的是整数而不是字符。字符是用ASCll 编码的数字来进行保存的。</p><p>声明方式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> broiled;<br><span class="hljs-type">char</span> itable,latan;<br><br>broiled = <span class="hljs-string">&#x27;T&#x27;</span>;<span class="hljs-comment">//此处只能使用单引号</span><br><span class="hljs-type">char</span> grade = <span class="hljs-number">65</span>;<span class="hljs-comment">//可以将对应字符的ASCII码赋值给该变量，但是不推荐这样。</span><br></code></pre></td></tr></table></figure><h5 id="1、非打印字符"><a href="#1、非打印字符" class="headerlink" title="1、非打印字符"></a>1、非打印字符</h5><p>单引号只适用于字符、数字和标点符号，观察ASCII表会发现，有些ASCII字符打印不出来。例如一下代表行为的字符。C语言提供了三种方法表示：</p><ul><li><p>一种办法是直接使用ASCII码直接表示。例如蜂鸣字符的ASCII的码为7，则可以定义为char beep &#x3D; 7;</p></li><li><p>第二种办法是使用特殊的符号序列表示一些特殊的负号，这些符号序列表示转义序列（escape sequence）。</p><table><thead><tr><th align="center">转义序列</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">\a</td><td align="center">警报</td></tr><tr><td align="center">\b</td><td align="center">退格</td></tr><tr><td align="center">\f</td><td align="center">换页</td></tr><tr><td align="center">\n</td><td align="center">换行</td></tr><tr><td align="center">\r</td><td align="center">回车</td></tr><tr><td align="center">\t</td><td align="center">水平制表符</td></tr><tr><td align="center">\v</td><td align="center">垂直制表符</td></tr><tr><td align="center">\</td><td align="center">反斜杠</td></tr><tr><td align="center">\ ‘</td><td align="center">单引号</td></tr><tr><td align="center">\ ‘</td><td align="center">双引号</td></tr><tr><td align="center">?</td><td align="center">问号</td></tr><tr><td align="center">\0oo</td><td align="center">八进制（oo必须是有效的八进制数，即每个o可以表示0~7中的一个数）</td></tr><tr><td align="center">\xhh</td><td align="center">十六进制，hh含义同上。</td></tr></tbody></table></li></ul><p>char 类型的输出形式为 printf (“%c”)</p><h5 id="2、有符号还是无符号"><a href="#2、有符号还是无符号" class="headerlink" title="2、有符号还是无符号"></a>2、有符号还是无符号</h5><p>有的C编译器把char实现为有符号类型，即可表示的范围为 -128<del>127 ，而有些C编译器把char实现为无符号类型，即可表示的范围为 0</del>255。这就需要查阅具体的编译器手册。</p><h4 id="（五）、-Bool类型"><a href="#（五）、-Bool类型" class="headerlink" title="（五）、_Bool类型"></a>（五）、_Bool类型</h4><p>C99标准添加了_Bool类型，用于表示布尔值，即逻辑函数 true 和 false 。因为C语言使用0表示false，用1表示ture，所以 _Bool类型实际上也是一种整数类型。但他原则上仅占用1位储存空间。</p><h4 id="（六）、float-double-和-long-double"><a href="#（六）、float-double-和-long-double" class="headerlink" title="（六）、float double 和 long double"></a>（六）、float double 和 long double</h4><p>各种整数类型对于大多数软件开发已经够用了，但是面向金融和数学的程序经常使用浮点数。C语言中的浮点运算类型主要有float double 和 long double类型。浮点数的表示类似于科学计数法，即用小数乘以10的幂来表示数字。下表中给出了常见的计数示例：</p><table><thead><tr><th align="center">数字</th><th align="center">科学计数法</th><th align="center">指数计数法</th></tr></thead><tbody><tr><td align="center">1000000000</td><td align="center">1.0 * 10<sup>9</sup></td><td align="center">1.0e9</td></tr><tr><td align="center">123000</td><td align="center">1.23 * 10<sup>5</sup></td><td align="center">1.23e5</td></tr><tr><td align="center">322.56</td><td align="center">3.2256 * 10<sup>2</sup></td><td align="center">3.2256e2</td></tr><tr><td align="center">0.000056</td><td align="center">5.6 * 10<sup>-5</sup></td><td align="center">5.6e-5</td></tr></tbody></table><h5 id="1、声明浮点型变量"><a href="#1、声明浮点型变量" class="headerlink" title="1、声明浮点型变量"></a>1、声明浮点型变量</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">float</span> noah,jonah;<br><span class="hljs-type">double</span> trouble;<br><span class="hljs-type">float</span> planck = <span class="hljs-number">6.63e-34</span>;<br><span class="hljs-type">long</span> <span class="hljs-type">double</span> gnp;<br></code></pre></td></tr></table></figure><h5 id="2、浮点型常量"><a href="#2、浮点型常量" class="headerlink" title="2、浮点型常量"></a>2、浮点型常量</h5><p>基本书写形式：有符号的数字（包括小数点），后面紧跟E或e，最后是一个有符号数表示10的指数。例举两个有效的浮点数常量：-1.56E+122.78e-3 </p><p><strong>不要在浮点数常量中间加空格：1.56 E+12这样是错误的！</strong></p><p>注意浮点数的几种错误，一是浮点值的上溢出和下溢出。二是浮点数的舍入错误。</p><h4 id="（七）、复数和虚数类型"><a href="#（七）、复数和虚数类型" class="headerlink" title="（七）、复数和虚数类型"></a>（七）、复数和虚数类型</h4><p>C语言有三种复数类型：float_Complex、double_Complex、long double_Complex。例如float_Complex 类型的变量应包含两个float类型的值，分别表示复数的实部和虚部。类似的，C语言的三种虚数类型是float_Imaginary、double_Imaginary、long double_Imaginary。</p><p>如果包含complex.h这一个头文件，便可以用complex代替_Complex，imaginary代替 _Imaginary，还可以用 I 代替-1的平方根。</p><h4 id="（八）、Conclusion"><a href="#（八）、Conclusion" class="headerlink" title="（八）、Conclusion"></a>（八）、Conclusion</h4><ul><li><p>关键字,共有十一个</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span>; <span class="hljs-type">long</span>; <span class="hljs-type">short</span>; <span class="hljs-type">unsigned</span>; <span class="hljs-type">char</span>; <span class="hljs-type">float</span>; <span class="hljs-type">double</span>; <span class="hljs-type">signed</span>; <span class="hljs-type">_Bool</span>; <span class="hljs-type">_Complex</span>; <span class="hljs-type">_Imaginary</span>; <br></code></pre></td></tr></table></figure></li><li><p>有符号整形：有符号整形可以表示正整数和负整数</p><ul><li>int：系统给定的基本整数类型。C语言规定int的类型不小于16位。</li><li>short 或 short int ：最大的short类型整数小于或等于最大的int类型整数。C语言规定short 类型至少占用16位。4</li><li>long 或 long int：该类型可表示的整数大于或等于最大的int类型整数。C语言规定long类型至少占32位。</li><li>long long 或 long long int ：该类型可表示的整数大于或等于最大的long类型整数，long long类型至少占用64位。</li></ul></li><li><p>无符号整形</p><p>无符号整形只能用于表示零和正整数，因此无符号整形可表示的正整数比有符号的整形大。在整形类型前加上unsigned表示是无符号类型。</p></li><li><p>字符类型</p><p>可打印出来的符号都是字符类型，根据定义，char类型表示一个字符要占用1字节的内存。char 字符类型的关键字。</p></li><li><p>布尔类型</p><p>布尔值表示 true 和 false。C语言使用1表示true，使用0表示false。_Bool类型的关键字。布尔类型是无符号int类型，所占用的空间只要是能储存0或1即可。</p></li><li><p>实浮点类型</p><p> 实浮点类型可表示正浮点数和复浮点数。</p><p> float：系统的基本浮点类型，可精确表示至少6位有效数字。</p><p> double：储存浮点数的范围更大，能表示比float更多的有效数字，和更大的指数。</p><p> long double：储存浮点数的范围比double更大，能表示比double更多的有效数字和更大的指数。</p></li><li><p>复数和虚数浮点数</p><p> 虚数类型是可选的类型，复数的实部和虚部类型都基于实浮点类型来构成。</p><ul><li>float_Complex</li><li>double_Complex</li><li>long double_Complex</li><li>float_Imaginary</li><li>double_Imaginary</li><li>long long_Imaginary</li></ul></li><li><p>如何声明简单变量</p><ol><li>选择需要的类型</li><li>使用有效的字符给变量起一个变量名</li><li>按以下格式进行声明：类型说明符 变量名；类型说明符由一个或多个关键字组成。例如 int erest；</li><li>可以同时声明相同类型的多个变量，用逗号分隔各个变量名，例如char ch,init,ans;</li><li>在声明的同时还可以初始化变量：float mass &#x3D; 6.0E24;</li></ol></li><li><p>类型大小</p><p> 如果想知道当前系统指定的大小是多少，可以通过 sizeof() 来进行打印输出。例如 printf(“int size is %zd bytes. \n”,sizeof(int));</p></li><li><p>刷新输出</p><p> printf() 函数何时把输出发送到屏幕上？最初，printf() 语句首先把输出发送到一个叫作缓冲区（buffer）的中间储存区域，然后缓冲区的内容再不断被发送到屏幕上。当缓冲区满、或者遇到换行字符或需要输入这三种情况的时候，才刷新缓冲区，即迫使printf() 的输出被发送到屏幕上。</p></li></ul><h3 id="五-、Test"><a href="#五-、Test" class="headerlink" title="(五)、Test"></a>(五)、Test</h3><h4 id="（一）、基础练习"><a href="#（一）、基础练习" class="headerlink" title="（一）、基础练习"></a>（一）、基础练习</h4><ol><li><h6 id="指出下面各种数据使用的合适的数据类型，注意有些可使用多种数据类脑"><a href="#指出下面各种数据使用的合适的数据类型，注意有些可使用多种数据类脑" class="headerlink" title="指出下面各种数据使用的合适的数据类型，注意有些可使用多种数据类脑"></a>指出下面各种数据使用的合适的数据类型，注意有些可使用多种数据类脑</h6><ol><li>East Simpleton 的人口</li><li>DVD影碟的价格</li><li>本章出现次数最多的字母</li><li>本章出现次数最多的子母次数</li></ol></li><li><p>在什么情况要用long类型的变量代替int类型的变量？</p></li><li><p>使用哪些可移植的数据类型可以获得32位有符号整数？选择的理由是什么？</p></li><li><p>指出下列常量的类型和含义（如果有的话）</p><ol><li>‘\b’</li><li>1066</li><li>99.44</li><li>0XAA</li><li>2.0e30</li></ol></li><li><p>Dottie Cawm编写了一个程序，请找出程序中的错误。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br>main()<br>&#123;<br>    <span class="hljs-type">float</span> g; h;<br>    <span class="hljs-type">float</span> tax, rate;<br>    <br>    g = e21;<br>    tax = rate * g;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>写出下列常量在声明中使用的数据类型和在printf() 中对应的转换说明</p><table><thead><tr><th align="center">常量</th><th align="center">类型</th><th align="center">转换说明（%转换字符）</th></tr></thead><tbody><tr><td align="center">12</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">0X3</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">‘C’</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">2.3E07</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">‘\040’</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">7.0</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">6L</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">6.0f</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">0x5.b6p12</td><td align="center"></td><td align="center"></td></tr></tbody></table></li><li><p>写出下列常量在声明中使用的数据类型和在printf() 中对应的转换说明（假设int为16位）</p><table><thead><tr><th align="center">常量</th><th align="center">类型</th><th align="center">转换说明（%转换字符）</th></tr></thead><tbody><tr><td align="center">012</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">2.9e05L</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">‘s’</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">100000</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">‘\n’</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">20.0f</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">0x44</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">-40</td><td align="center"></td><td align="center"></td></tr></tbody></table></li><li><p>假设程序的开头有下列声明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> imate = <span class="hljs-number">2</span>;<br><span class="hljs-type">long</span> shot = <span class="hljs-number">53456</span>;<br><span class="hljs-type">char</span> grade = <span class="hljs-string">&#x27;A&#x27;</span>;<br><span class="hljs-type">float</span> <span class="hljs-built_in">log</span> = <span class="hljs-number">2.71828</span>;<br></code></pre></td></tr></table></figure><p>把下面的printf() 函数语句中的转换字符补充完整“</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;The odds against the %__ were %__ to 1.\n&quot;</span>,imate ,shot);<br><span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;A score of %__ is not an %__ grade.\n&quot;</span>,<span class="hljs-built_in">log</span>,grade);<br></code></pre></td></tr></table></figure></li><li><p>假设ch是char 类型的变量。分别使用转移序列、十进制值、八进制字符常量和十六进制字符常量把回车字符赋值给ch（假设使用ASCII编码值）；</p></li><li><p>修正下面的程序：（在C中，&#x2F;表示除以）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span> /this program is perfect /<br>&#123;<br>    cows,legs integer;<br>    <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;How many cow legs did you count?\n&quot;</span>);<br>    <span class="hljs-built_in">scanf</span> (<span class="hljs-string">&quot;%c&quot;</span>,legs);<br>    cows = legs / <span class="hljs-number">4</span>;<br>    <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;That implies there are %f cows.\n&quot;</span>,cows);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>指出下列转移字符的含义</p><ol><li>\n</li><li>\ \</li><li>\ ‘’ </li><li>\ t</li></ol></li></ol><h4 id="二-、编程练习"><a href="#二-、编程练习" class="headerlink" title="(二)、编程练习"></a>(二)、编程练习</h4><ol><li><p>通过编写相关程序，观察系统如何处理整数上溢、浮点数上溢和浮点数下溢的情况。</p></li><li><p>编写一个程序，要求提示输入一个ASCII码值（如，66），然后打印输入的字符。</p></li><li><p>编写一个程序，发出一声警报，然后打印下面的文本</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">Startled by the sudden sound,Sally shouted,<br><span class="hljs-string">&quot;By the Great Pumpkin,what was that!&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>编写一个程序，读取一个浮点数，先打印成小数点形式，再打印成指数形式。然后如果系统支持，在打印成p计数法，即十六进制计数法。按照以下格式输出（实际显示的指数位数因系统而异）</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Enter</span> a floatint-point value: <span class="hljs-number">64</span>.<span class="hljs-number">25</span><br><span class="hljs-attribute">fixed</span>-point notation: <span class="hljs-number">64</span>.<span class="hljs-number">250000</span><br><span class="hljs-attribute">exponential</span> notation: <span class="hljs-number">6</span>.<span class="hljs-number">425000</span>e±<span class="hljs-number">01</span><br><span class="hljs-attribute">p</span> notation: <span class="hljs-number">0</span>x1.<span class="hljs-number">01</span>p+<span class="hljs-number">6</span><br></code></pre></td></tr></table></figure></li><li><p>一年大约有3.156*10<sup>7</sup>秒。编写一个程序，提示用户输入年龄，然后显示该年龄对应的秒数。</p></li><li><p>1个水分子的质量约为3.0*10<sup>-23</sup>克。1夸脱水大约是950克。编写一个程序，提示用户输入水的夸脱数，并显示水分子的数量。</p></li><li><p>1英寸相当于2.54厘米。编写一个程序，提示用户输入身高（英寸），然后以厘米为单位显示身高。</p></li><li><p>在美国的体积测量系统中，1品脱等于2杯，1杯等于8盎司，1盎司等于2大汤勺，1大汤勺等于3茶勺。编写一个程序，提示用户输入杯数，并以品脱、盎司、汤勺、茶勺为单位显示等价容量。思考对于该程序，为何使用浮点类型比整数类型更合适？</p></li></ol><hr><h2 id="第四章、字符串和格式化输入-x2F-输出"><a href="#第四章、字符串和格式化输入-x2F-输出" class="headerlink" title="第四章、字符串和格式化输入&#x2F;输出"></a>第四章、字符串和格式化输入&#x2F;输出</h2><p>Introduction</p><ul><li>函数：strlen()</li><li>关键字：const</li><li>字符串</li><li>如何创建、储存字符串</li><li>如何使用strlen() 函数获取字符串长度</li><li>如C预处理器指令#define 和ANSIC 的const 修饰符创建符号常量</li></ul><h4 id="一、引导程序与解释"><a href="#一、引导程序与解释" class="headerlink" title="一、引导程序与解释"></a>一、引导程序与解释</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DENSITY 62.4</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-type">float</span> weight, volume;<br>    <span class="hljs-type">int</span> size, letters;<br>    <span class="hljs-type">char</span> name[<span class="hljs-number">40</span>];<br><br>    <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;Hi! What&#x27;s your first name?\n&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,name);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s,what&#x27;s your weight in pounds?\n&quot;</span>,name);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%f&quot;</span>,&amp;weight);<br>    size = <span class="hljs-keyword">sizeof</span> name;<br>    letters = <span class="hljs-built_in">strlen</span>(name);<br>    volume = weight / DENSITY;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Well,%s,your volume is %2.2f cubic feet.\n&quot;</span>,name, volume);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Also,your first name has %d letters,\n&quot;</span>,letters);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;and we have %d bytes to store it.\n&quot;</span>,size);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>该程序的新特性：</p><ul><li>用数组（array）储存字符串（character string）。在该程序中，用户输入的名被储存在数组中，该数组占用内存中40个连续的字节，每个字节储存一个字符值。</li><li>使用%s转换说明来处理字符串的输入和输出。注意，在scanf() 中，name没有&amp;前缀，而weight有。而&amp;weight和name都是地址。</li><li>用C预处理器把字符常量DENSITY 定义为62.4</li><li>用C函数strlen() 获取字符串的长度</li></ul><h4 id="二、字符串简介"><a href="#二、字符串简介" class="headerlink" title="二、字符串简介"></a>二、字符串简介</h4><p>字符串（character string）是一个或多个字符的序列，如“Zing went the strings of my heart！”</p><h5 id="（一）、char-类型数组和null字符"><a href="#（一）、char-类型数组和null字符" class="headerlink" title="（一）、char 类型数组和null字符"></a>（一）、char 类型数组和null字符</h5><p>C语言没有专门用于储存字符串的变量类型。字符串都被储存在char类型的数组中。而数组又由连续的储存单元组成，字符串中的字符都被储存在相邻的储存单元中，每个单元储存一个字符。</p><p>注意数组末尾 \0 字符。这是空字符（null character），C语言用它标记字符串的结束。空字符不是数字0，它是非打印字符，其ASCII码值是0。C语言中的字符串<strong>一定是以空字符结束</strong>，这意味着数组的容量必须至少比待储存的字符串多1 。</p><p>数组可以看做是一行连续的多个储存单元。正式的说法是同类型数据元素的有序序列。例如上文声明的一个 char name[40]; 类型的值。name后面的方括号表示这是一个数组，方括号中的40表明该数组中的元素数量，char表示数组每个元素的类型。</p>]]></content>
    
    
    
    <tags>
      
      <tag>C语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/12/09/hello-world/"/>
    <url>/2022/12/09/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
