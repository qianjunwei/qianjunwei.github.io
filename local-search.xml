<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/12/12/C%20Language%20Points/"/>
    <url>/2022/12/12/C%20Language%20Points/</url>
    
    <content type="html"><![CDATA[<h2 id="C-Language-Points"><a href="#C-Language-Points" class="headerlink" title="C Language Points"></a>C Language Points</h2><h3 id="第一章：C语言的背景"><a href="#第一章：C语言的背景" class="headerlink" title="第一章：C语言的背景"></a>第一章：C语言的背景</h3><h4 id="一、C语言的起源"><a href="#一、C语言的起源" class="headerlink" title="一、C语言的起源"></a>一、C语言的起源</h4><p>1972年由贝尔实验室的 Dennis Ritchie 和Ken Thompson 在开发Unix系统的基础上开发的C语言。</p><h4 id="二、C语言流行的原因"><a href="#二、C语言流行的原因" class="headerlink" title="二、C语言流行的原因"></a>二、C语言流行的原因</h4><ul><li><strong>设计特性</strong>：融合了计算机科学理论和实践的控制特性。其设计理念能够使得用户能够轻松完成自顶向下的规划、结构化编程和模块化设计。</li><li><strong>高效性</strong>：充分调动计算机资源，使得C程序更加的紧凑，且运行速度更快，具备了汇编语言才具有的微调控制能力。也能够通过指针直接操作内存。</li><li><strong>可移植性</strong>：这意味着，在一种系统中编写的C程序稍作修改或者不修改就可以在其他系统上运行。</li><li><strong>强大而灵活</strong>：例如Unix系统就是使用C语言进行编写的。还有很多其他语言的许多编译器与解释器都是使用C语言编写的。</li><li><strong>面向程序员</strong>：其是为了满足程序员的需求而设计的，程序员利用C可以访问硬件、操作内存中的位。C语言有丰富的运算符，能够让程序员简洁的表达自己的意图。</li><li><strong>缺点</strong>：C语言使用指针，而涉及指针的编程错误往往难以察觉。</li></ul><h4 id="三、C语言的应用范围"><a href="#三、C语言的应用范围" class="headerlink" title="三、C语言的应用范围"></a>三、C语言的应用范围</h4><p>二十世纪八十年代开始，C语言就已经成为小型计算机Unix的主流语言，从那以后，C语言的使用范围就逐渐扩大到微型机和大型机上。主要的原因是由于C语言编写的程序紧凑而高效，更重要是很方便修改，移植到新版本的计算机上问题也不大。</p><h4 id="四、高级计算机语言和编译器"><a href="#四、高级计算机语言和编译器" class="headerlink" title="四、高级计算机语言和编译器"></a>四、高级计算机语言和编译器</h4><p>高级程序语言简化了编程工作，首先是不需要使用指令码表示指令，其次使用的指令更贴近你如何想这个问题，而不是计算机内部的繁琐的步骤，简单的说就是高级语言的目的就是站在人的角度上思考问题，而不是站在计算机的角度上思考问题。</p><p>编译器就是将高级语言程序翻译成计算机能够理解的机器语言指令集的程序。</p><p>简而言之，高级语言就是以更抽象的方式描述行为，不受限于特性的CPU或者指令集，同时高级语言也更加易学，用高级语言编程比用机器语言编程容易的多。</p><h4 id="五、语言标准"><a href="#五、语言标准" class="headerlink" title="五、语言标准"></a>五、语言标准</h4><ul><li>1987年 Brian Kernighan和Dennis Ritchie 编写的 The C Programming Language 是公认的第一版C标准。但是其没有定义C库。</li><li><strong>第一个ANSI&#x2F;ISO C标准</strong>：ANSI与1983组建了一个委员会 X3J11 开发了一套标准。1989年颁布为ANSI C，成为C89标准。1990年，国际标准化组织采用ANSI C颁布了ISO C标准，称为C90.</li><li><strong>C99标准：</strong>1994年，ANSI 和 ISO联合委员会开始修订C标准，并最终发布了C99.</li></ul><h4 id="六、使用C语言的七个步骤"><a href="#六、使用C语言的七个步骤" class="headerlink" title="六、使用C语言的七个步骤"></a>六、使用C语言的七个步骤</h4><ol><li><strong>定义程序的目标：</strong>在开发程序之前，脑海中要有清晰的思路。想要程序去做什么首先要明确自己想做什么，思考你的程序需要哪些信息，要进行哪些计算和控制，以及程序应该要报告什么信息。在这一步骤中，不涉及具体的计算机语言，仅用一般术语来描述问题。</li><li><strong>设计程序：</strong>对程序应该完成什么任务有概念性的认识后，就应该考虑如何用程序来完成它。例如用户界面应该是怎么样的？如何组织程序？目标用户是谁？准备花多长时间来完成？除此之外还要决定在程序中如何表示数据？以及用什么方式处理数据？</li><li><strong>编写代码：</strong>设计好程序之后，就可以编写代码来实现它。也就是说，把你设计的程序翻译成C语言，这也是真正需要使用到C语言的地方。</li><li><strong>编译：</strong></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/12/09/hello-world/"/>
    <url>/2022/12/09/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
