<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>C Language Points</title>
    <link href="/2022/12/12/C%20Language%20Points/"/>
    <url>/2022/12/12/C%20Language%20Points/</url>
    
    <content type="html"><![CDATA[<h3 id="第一章、C语言的背景"><a href="#第一章、C语言的背景" class="headerlink" title="第一章、C语言的背景"></a>第一章、C语言的背景</h3><h4 id="一、C语言的起源"><a href="#一、C语言的起源" class="headerlink" title="一、C语言的起源"></a>一、C语言的起源</h4><p>1972年由贝尔实验室的 Dennis Ritchie 和Ken Thompson 在开发Unix系统的基础上开发的C语言。</p><h4 id="二、C语言流行的原因"><a href="#二、C语言流行的原因" class="headerlink" title="二、C语言流行的原因"></a>二、C语言流行的原因</h4><ul><li><strong>设计特性</strong>：融合了计算机科学理论和实践的控制特性。其设计理念能够使得用户能够轻松完成自顶向下的规划、结构化编程和模块化设计。</li><li><strong>高效性</strong>：充分调动计算机资源，使得C程序更加的紧凑，且运行速度更快，具备了汇编语言才具有的微调控制能力。也能够通过指针直接操作内存。</li><li><strong>可移植性</strong>：这意味着，在一种系统中编写的C程序稍作修改或者不修改就可以在其他系统上运行。</li><li><strong>强大而灵活</strong>：例如Unix系统就是使用C语言进行编写的。还有很多其他语言的许多编译器与解释器都是使用C语言编写的。</li><li><strong>面向程序员</strong>：其是为了满足程序员的需求而设计的，程序员利用C可以访问硬件、操作内存中的位。C语言有丰富的运算符，能够让程序员简洁的表达自己的意图。</li><li><strong>缺点</strong>：C语言使用指针，而涉及指针的编程错误往往难以察觉。</li></ul><h4 id="三、C语言的应用范围"><a href="#三、C语言的应用范围" class="headerlink" title="三、C语言的应用范围"></a>三、C语言的应用范围</h4><p>二十世纪八十年代开始，C语言就已经成为小型计算机Unix的主流语言，从那以后，C语言的使用范围就逐渐扩大到微型机和大型机上。主要的原因是由于C语言编写的程序紧凑而高效，更重要是很方便修改，移植到新版本的计算机上问题也不大。</p><h4 id="四、高级计算机语言和编译器"><a href="#四、高级计算机语言和编译器" class="headerlink" title="四、高级计算机语言和编译器"></a>四、高级计算机语言和编译器</h4><p>高级程序语言简化了编程工作，首先是不需要使用指令码表示指令，其次使用的指令更贴近你如何想这个问题，而不是计算机内部的繁琐的步骤，简单的说就是高级语言的目的就是站在人的角度上思考问题，而不是站在计算机的角度上思考问题。</p><p>编译器就是将高级语言程序翻译成计算机能够理解的机器语言指令集的程序。</p><p>简而言之，高级语言就是以更抽象的方式描述行为，不受限于特性的CPU或者指令集，同时高级语言也更加易学，用高级语言编程比用机器语言编程容易的多。</p><h4 id="五、语言标准"><a href="#五、语言标准" class="headerlink" title="五、语言标准"></a>五、语言标准</h4><ul><li>1987年 Brian Kernighan和Dennis Ritchie 编写的 The C Programming Language 是公认的第一版C标准。但是其没有定义C库。</li><li><strong>第一个ANSI&#x2F;ISO C标准</strong>：ANSI与1983组建了一个委员会 X3J11 开发了一套标准。1989年颁布为ANSI C，成为C89标准。1990年，国际标准化组织采用ANSI C颁布了ISO C标准，称为C90.</li><li><strong>C99标准：</strong>1994年，ANSI 和 ISO联合委员会开始修订C标准，并最终发布了C99.</li></ul><h4 id="六、使用C语言的七个步骤"><a href="#六、使用C语言的七个步骤" class="headerlink" title="六、使用C语言的七个步骤"></a>六、使用C语言的七个步骤</h4><ol><li><strong>定义程序的目标：</strong>在开发程序之前，脑海中要有清晰的思路。想要程序去做什么首先要明确自己想做什么，思考你的程序需要哪些信息，要进行哪些计算和控制，以及程序应该要报告什么信息。在这一步骤中，不涉及具体的计算机语言，仅用一般术语来描述问题。</li><li><strong>设计程序：</strong>对程序应该完成什么任务有概念性的认识后，就应该考虑如何用程序来完成它。例如用户界面应该是怎么样的？如何组织程序？目标用户是谁？准备花多长时间来完成？除此之外还要决定在程序中如何表示数据？以及用什么方式处理数据？</li><li><strong>编写代码：</strong>设计好程序之后，就可以编写代码来实现它。也就是说，把你设计的程序翻译成C语言，这也是真正需要使用到C语言的地方。</li><li><strong>编译：</strong>编译的细节取决于编程的环境。C编译器负责把C代码翻译成特定的机器语言。此外，C编译器还将源代码与C库的代码一起合并为最终的程序。</li><li><strong>运行程序：</strong>最终生成的程序可通过单击或双击文件名或图标直接在操作系统中运行。</li><li><strong>测试和调试程序：</strong>查找并修复程序错误的过程叫做调试。</li><li><strong>维护和修改代码：</strong>创建完程序之后，发现程序有错，或者想扩展程序的功能，这时候就要修改程序。</li></ol><h4 id="七、编程机制"><a href="#七、编程机制" class="headerlink" title="七、编程机制"></a>七、编程机制</h4><ul><li>一开始编写C程序时，编写的内容被储存在文本文件中，该文件被称为源代码文件。大部分C系统都是以  .c 结尾。</li><li>C编程的基本策略是：用程序把源代码文件转换为可执行文件（包含可直接运行的机器语言代码），典型的C实现通过编译和链接两个步骤来完成这一过程。编译器把源代码转换成中间代码，链接器把中间代码和其他代码合并，生成可执行文件。C使用这种分而治之的方法方便对程序进行模块化，也可以编译单独的模块。</li><li>中间文件有多种形式，我们在这里描述的最普遍的一种形式，即把源代码转换为机器语言代码，并把结构放在目标代码文件中。</li><li>Unix系统：C语言因Unix系统而生，也因此而流行。</li><li>Linux系统：是一个开源、流行、类Unix的系统，可在不同平台运行。</li><li>集成开发环境：Windows上提供了很多的集成开发环境。统称为IDE。流行的有VS,CLion等。</li></ul><h4 id="八、Test："><a href="#八、Test：" class="headerlink" title="八、Test："></a>八、Test：</h4><ol><li>对编程而言，可移植性意味着什么？</li><li>解释性代码文件，目标代码文件和可执行文件有什么区别？</li><li>编程的七个主要步骤是什么？</li><li>编译器的任务是什么？</li><li>链接器的任务是什么</li></ol><hr><h3 id="第二章、C语言概述"><a href="#第二章、C语言概述" class="headerlink" title="第二章、C语言概述"></a>第二章、C语言概述</h3><h4 id="一、简单的C程序示例"><a href="#一、简单的C程序示例" class="headerlink" title="一、简单的C程序示例"></a>一、简单的C程序示例</h4><figure class="highlight c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> num = <span class="hljs-number">1</span>;   <span class="hljs-comment">//定义一个整形变量num并赋值1</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;I am a simple!&quot;</span>);<span class="hljs-comment">//使用printf进行打印输出</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;computer.\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;My favorite number is %d because it is first.\n&quot;</span>,num);<br>    <br>    getchar();   <span class="hljs-comment">//等待输入按键后关闭窗口</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="声明变量的意义"><a href="#声明变量的意义" class="headerlink" title="声明变量的意义"></a>声明变量的意义</h5><ul><li>把所有的变量都放在一处，方便查找和理解程序的用途。如果变量名都是有意义的，这样做效果会更好。如果部分变量名无法表达清楚，在注释中解释变量的含义，这样程序的可读性更高。</li><li>声明变量会促使你在编写程序之前做一些计划。在程序开始时要获得哪些信息？希望程序如何输出？表示数据最好的方式是什么？</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/12/09/hello-world/"/>
    <url>/2022/12/09/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
