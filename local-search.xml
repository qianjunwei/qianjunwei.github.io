<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>C Language Points</title>
    <link href="/2022/12/13/C-Language-Points/"/>
    <url>/2022/12/13/C-Language-Points/</url>
    
    <content type="html"><![CDATA[<h3 id="第一章、C语言的背景"><a href="#第一章、C语言的背景" class="headerlink" title="第一章、C语言的背景"></a>第一章、C语言的背景</h3><h4 id="一、C语言的起源"><a href="#一、C语言的起源" class="headerlink" title="一、C语言的起源"></a>一、C语言的起源</h4><p>1972年由贝尔实验室的 Dennis Ritchie 和Ken Thompson 在开发Unix系统的基础上开发的C语言。</p><h4 id="二、C语言流行的原因"><a href="#二、C语言流行的原因" class="headerlink" title="二、C语言流行的原因"></a>二、C语言流行的原因</h4><ul><li><strong>设计特性</strong>：融合了计算机科学理论和实践的控制特性。其设计理念能够使得用户能够轻松完成自顶向下的规划、结构化编程和模块化设计。</li><li><strong>高效性</strong>：充分调动计算机资源，使得C程序更加的紧凑，且运行速度更快，具备了汇编语言才具有的微调控制能力。也能够通过指针直接操作内存。</li><li><strong>可移植性</strong>：这意味着，在一种系统中编写的C程序稍作修改或者不修改就可以在其他系统上运行。</li><li><strong>强大而灵活</strong>：例如Unix系统就是使用C语言进行编写的。还有很多其他语言的许多编译器与解释器都是使用C语言编写的。</li><li><strong>面向程序员</strong>：其是为了满足程序员的需求而设计的，程序员利用C可以访问硬件、操作内存中的位。C语言有丰富的运算符，能够让程序员简洁的表达自己的意图。</li><li><strong>缺点</strong>：C语言使用指针，而涉及指针的编程错误往往难以察觉。</li></ul><h4 id="三、C语言的应用范围"><a href="#三、C语言的应用范围" class="headerlink" title="三、C语言的应用范围"></a>三、C语言的应用范围</h4><p>二十世纪八十年代开始，C语言就已经成为小型计算机Unix的主流语言，从那以后，C语言的使用范围就逐渐扩大到微型机和大型机上。主要的原因是由于C语言编写的程序紧凑而高效，更重要是很方便修改，移植到新版本的计算机上问题也不大。</p><h4 id="四、高级计算机语言和编译器"><a href="#四、高级计算机语言和编译器" class="headerlink" title="四、高级计算机语言和编译器"></a>四、高级计算机语言和编译器</h4><p>高级程序语言简化了编程工作，首先是不需要使用指令码表示指令，其次使用的指令更贴近你如何想这个问题，而不是计算机内部的繁琐的步骤，简单的说就是高级语言的目的就是站在人的角度上思考问题，而不是站在计算机的角度上思考问题。</p><p>编译器就是将高级语言程序翻译成计算机能够理解的机器语言指令集的程序。</p><p>简而言之，高级语言就是以更抽象的方式描述行为，不受限于特性的CPU或者指令集，同时高级语言也更加易学，用高级语言编程比用机器语言编程容易的多。</p><h4 id="五、语言标准"><a href="#五、语言标准" class="headerlink" title="五、语言标准"></a>五、语言标准</h4><ul><li>1987年 Brian Kernighan和Dennis Ritchie 编写的 The C Programming Language 是公认的第一版C标准。但是其没有定义C库。</li><li><strong>第一个ANSI&#x2F;ISO C标准</strong>：ANSI与1983组建了一个委员会 X3J11 开发了一套标准。1989年颁布为ANSI C，成为C89标准。1990年，国际标准化组织采用ANSI C颁布了ISO C标准，称为C90.</li><li><strong>C99标准：</strong>1994年，ANSI 和 ISO联合委员会开始修订C标准，并最终发布了C99.</li></ul><h4 id="六、使用C语言的七个步骤"><a href="#六、使用C语言的七个步骤" class="headerlink" title="六、使用C语言的七个步骤"></a>六、使用C语言的七个步骤</h4><ol><li><strong>定义程序的目标：</strong>在开发程序之前，脑海中要有清晰的思路。想要程序去做什么首先要明确自己想做什么，思考你的程序需要哪些信息，要进行哪些计算和控制，以及程序应该要报告什么信息。在这一步骤中，不涉及具体的计算机语言，仅用一般术语来描述问题。</li><li><strong>设计程序：</strong>对程序应该完成什么任务有概念性的认识后，就应该考虑如何用程序来完成它。例如用户界面应该是怎么样的？如何组织程序？目标用户是谁？准备花多长时间来完成？除此之外还要决定在程序中如何表示数据？以及用什么方式处理数据？</li><li><strong>编写代码：</strong>设计好程序之后，就可以编写代码来实现它。也就是说，把你设计的程序翻译成C语言，这也是真正需要使用到C语言的地方。</li><li><strong>编译：</strong>编译的细节取决于编程的环境。C编译器负责把C代码翻译成特定的机器语言。此外，C编译器还将源代码与C库的代码一起合并为最终的程序。</li><li><strong>运行程序：</strong>最终生成的程序可通过单击或双击文件名或图标直接在操作系统中运行。</li><li><strong>测试和调试程序：</strong>查找并修复程序错误的过程叫做调试。</li><li><strong>维护和修改代码：</strong>创建完程序之后，发现程序有错，或者想扩展程序的功能，这时候就要修改程序。</li></ol><h4 id="七、编程机制"><a href="#七、编程机制" class="headerlink" title="七、编程机制"></a>七、编程机制</h4><ul><li>一开始编写C程序时，编写的内容被储存在文本文件中，该文件被称为源代码文件。大部分C系统都是以  .c 结尾。</li><li>C编程的基本策略是：用程序把源代码文件转换为可执行文件（包含可直接运行的机器语言代码），典型的C实现通过编译和链接两个步骤来完成这一过程。编译器把源代码转换成中间代码，链接器把中间代码和其他代码合并，生成可执行文件。C使用这种分而治之的方法方便对程序进行模块化，也可以编译单独的模块。</li><li>中间文件有多种形式，我们在这里描述的最普遍的一种形式，即把源代码转换为机器语言代码，并把结构放在目标代码文件中。</li><li>Unix系统：C语言因Unix系统而生，也因此而流行。</li><li>Linux系统：是一个开源、流行、类Unix的系统，可在不同平台运行。</li><li>集成开发环境：Windows上提供了很多的集成开发环境。统称为IDE。流行的有VS,CLion等。</li></ul><h4 id="八、Test："><a href="#八、Test：" class="headerlink" title="八、Test："></a>八、Test：</h4><ol><li>对编程而言，可移植性意味着什么？</li><li>解释性代码文件，目标代码文件和可执行文件有什么区别？</li><li>编程的七个主要步骤是什么？</li><li>编译器的任务是什么？</li><li>链接器的任务是什么</li></ol><hr><h3 id="第二章、C语言概述"><a href="#第二章、C语言概述" class="headerlink" title="第二章、C语言概述"></a>第二章、C语言概述</h3><h4 id="一、简单的C程序示例"><a href="#一、简单的C程序示例" class="headerlink" title="一、简单的C程序示例"></a>一、简单的C程序示例</h4><figure class="highlight c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> num = <span class="hljs-number">1</span>;   <span class="hljs-comment">//定义一个整形变量num并赋值1</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;I am a simple!&quot;</span>);<span class="hljs-comment">//使用printf进行打印输出</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;computer.\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;My favorite number is %d because it is first.\n&quot;</span>,num);<br>    <br>    getchar();   <span class="hljs-comment">//等待输入按键后关闭窗口</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="声明变量的意义"><a href="#声明变量的意义" class="headerlink" title="声明变量的意义"></a>声明变量的意义</h5><ul><li>把所有的变量都放在一处，方便查找和理解程序的用途。如果变量名都是有意义的，这样做效果会更好。如果部分变量名无法表达清楚，在注释中解释变量的含义，这样程序的可读性更高。</li><li>声明变量会促使你在编写程序之前做一些计划。在程序开始时要获得哪些信息？希望程序如何输出？表示数据最好的方式是什么？</li><li>声明变量有助于发现隐藏在程序中的小错误，如变量名拼写错误。</li><li>C99之前的标准要求把声明都置于块的顶部，这样规定的好处是：把声明都放在一起更容易理解程序的用途。而C99标准允许在需要变量时才声明变量，这样做的好处是：在给变量赋值之前声明变量，就不会忘记给变量赋值。</li></ul><h5 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h5><p>赋值是C语言的基本操作之一。赋值语句的意义就把右边的值放在左边所声明的变量的空间之中。</p><h4 id="二、提高程序可读性的技巧"><a href="#二、提高程序可读性的技巧" class="headerlink" title="二、提高程序可读性的技巧"></a>二、提高程序可读性的技巧</h4><ol><li>选择有意义的函数名和写注释，但是使用这两种技巧时应该相得益彰，避免啰嗦。</li><li>在函数中用空行分隔概念上的多个部分。</li><li>每条语句各占一行。</li></ol><h4 id="三、多个函数"><a href="#三、多个函数" class="headerlink" title="三、多个函数"></a>三、多个函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">World</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>；<span class="hljs-comment">//函数原型</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><span class="hljs-comment">//此函数输出Hello</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello\t&quot;</span>);<br>    World();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>；<br>&#125;<br><br><span class="hljs-type">void</span> World(<span class="hljs-type">void</span>)<span class="hljs-comment">//此函数输出World</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;World!\n&quot;</span>);<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>在上文代码中，World出现了三次。第一次是函数原型，告知编译器在程序中要使用该函数，第二次以函数调用的形式出现在 main() 函数中，最后一次出现在函数定义中，函数定义即是函数本身的源代码。</p><h4 id="四、程序状态"><a href="#四、程序状态" class="headerlink" title="四、程序状态"></a>四、程序状态</h4><p>通过逐步跟踪程序的执行步骤，并记录每个变量，便可监视程序的状态。程序状态是在程序的执行过程中，某给定点上所有变量值的几集合。</p><p>跟踪程序状态的方法：如果循环有非常多次，观察一小部分循环，是否按照预期的方式执行。另外还要根据实际写出来的代码与运行程序，而不是根据自己的所想进行程序的运行。所以要尽量忠实代码来进行模拟。</p><p>定义语义错误的另一种方法是：在程序的关键点插入额外的 printf 语句，以监视变量值的变化。</p><p>最后一种方法是使用调试器。调试器是一种程序，让你一步一步的运行另一个程序，并检查该程序的变量值。</p><h4 id="五、关键字和保留字符"><a href="#五、关键字和保留字符" class="headerlink" title="五、关键字和保留字符"></a><strong>五、关键字和保留字符</strong></h4><p>关键字是C语言的词汇。关键字对于C语言来说比较特殊，因为其不能够作为标识符使用。许多关键字用于指定不同的类型，比如说 int 和 float 等，还有一些关键字用于控制程序中的语句执行顺序。下表中，粗体表示C90新增的关键字，斜体表示C99标准新增的关键字，粗斜体表示C11中新增的关键字。</p><table><thead><tr><th align="center">auto</th><th align="center">extern</th><th align="center">short</th><th align="center"><strong>while</strong></th></tr></thead><tbody><tr><td align="center">break</td><td align="center">float</td><td align="center"><strong>signed</strong></td><td align="center"><em><strong>_Alignas</strong></em></td></tr><tr><td align="center">case</td><td align="center">for</td><td align="center">sizeof</td><td align="center"><em><strong>_Alignof</strong></em></td></tr><tr><td align="center">char</td><td align="center">goto</td><td align="center">static</td><td align="center"><em><strong>_Atomic</strong></em></td></tr><tr><td align="center">const</td><td align="center">if</td><td align="center">struct</td><td align="center"><em><strong>_Bool</strong></em></td></tr><tr><td align="center">continue</td><td align="center">inline</td><td align="center">switch</td><td align="center"><em><strong>_Complex</strong></em></td></tr><tr><td align="center">default</td><td align="center">int</td><td align="center">typedef</td><td align="center"><em><strong>_Generic</strong></em></td></tr><tr><td align="center">do</td><td align="center">long</td><td align="center">union</td><td align="center"><em><strong>_Imaginary</strong></em></td></tr><tr><td align="center">double</td><td align="center">register</td><td align="center">unsigned</td><td align="center"><em><strong>_Noreturn</strong></em></td></tr><tr><td align="center">else</td><td align="center">restrict</td><td align="center">void</td><td align="center"><em><strong>_Static_assert</strong></em></td></tr><tr><td align="center"><strong>enum</strong></td><td align="center">return</td><td align="center"><strong>volatile</strong></td><td align="center"><em><strong>_Thread_local</strong></em></td></tr></tbody></table><h4 id="六、关键概念"><a href="#六、关键概念" class="headerlink" title="六、关键概念"></a>六、关键概念</h4><p>对于编程人员来说，要具备抽象和逻辑的思维，并谨慎的处理细节问题。应该理解什么是C程序，可以把程序看做是你希望计算机如何完成任务的描述。编译器负责具体的细节工作。</p><h4 id="七、Test"><a href="#七、Test" class="headerlink" title="七、Test"></a>七、Test</h4><h5 id="（一）、基础测试"><a href="#（一）、基础测试" class="headerlink" title="（一）、基础测试"></a>（一）、基础测试</h5><ol><li><p>C语言的基本模块是什么？</p></li><li><p>什么是语法错误？写出一个英语例子和C语言例子？</p></li><li><p>什么是语义错误？写出一个英语例子和C语言例子？</p></li><li><p>Indiana Sloth 编写了下面的程序，并征求你的意见，请帮助他评定。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c">include studio.h<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><span class="hljs-comment">//该程序打印一年有多少周</span><br>&#123;<br>    <span class="hljs-type">int</span> s<br>    <br>    s := <span class="hljs-number">56</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;There are s weeks in a year.&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>假设下面的4个例子都是完整程序中的一部分，它们都输出什么结果？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">printf</span>（<span class="hljs-string">&quot;Baa Baa Black Sheep.&quot;</span>）;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Have you any wool?\n&quot;</span>);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Begone!\n O creature of lard!\n&quot;</span>);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;What?\n No/n fish?\n&quot;</span>);<br><br><span class="hljs-type">int</span> num;<br>num = <span class="hljs-number">2</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d + %d = %d&quot;</span>,num,num,num+num);<br></code></pre></td></tr></table></figure></li><li><p>在 main int function char &#x3D; 中，哪些是C语言的关键字？</p></li><li><p>如何以下面的格式输出变量 words 和 lines 的值 （这里，3020和350代表两个变量的值？）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">There were <span class="hljs-number">3020</span> words and <span class="hljs-number">350</span> lines。<br></code></pre></td></tr></table></figure></li><li><p>考虑下面的程序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">int</span> x,y;<br>    x = <span class="hljs-number">10</span>;<br>    y = <span class="hljs-number">5</span>;<span class="hljs-comment">//第六行</span><br>    y = x+y;<span class="hljs-comment">//第七行</span><br>    x = x*y;<span class="hljs-comment">//第八行</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>,x,y);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>请问在执行完第六、七 、八行之后，程序的状态分别是什么？</p></li></ol><h5 id="（二）、编程练习"><a href="#（二）、编程练习" class="headerlink" title="（二）、编程练习"></a>（二）、编程练习</h5><ol><li><p>编写一个程序，调用一次 printf 函数，把你的姓名打印在第一行。再调用一次 printf 函数，把你的姓名分别打印在两行，然后再调用两次 printf 函数，把你的姓名打印在一行。输出应该如下所示。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">Gustav Mahler<span class="hljs-comment">//第一次打印的内容</span><br>Gustav    <span class="hljs-comment">//第二次打印的内容</span><br>Mahler<span class="hljs-comment">//仍然是第二次打印的内容</span><br>Gustav Mahler<span class="hljs-comment">//第三次和第四次打印的内容</span><br></code></pre></td></tr></table></figure></li><li><p>编写一个程序，打印你的姓名和地址。</p></li><li><p>编写一个程序把你的年龄转换成天数，并显示这两个值。这里不用考虑闰年的问题。</p></li><li><p>编写一个程序生成以下输出：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">For</span> h<span class="hljs-string">e&#x27;s a jolly good fellow!</span><br><span class="hljs-string">For he&#x27;</span>s a jolly good fellow!<br><span class="hljs-keyword">For</span> h<span class="hljs-string">e&#x27;s a jolly good fellow!</span><br><span class="hljs-string">Which nobody can deny!</span><br></code></pre></td></tr></table></figure><p>除了 main() 函数以外，该程序还要调用两个自定义函数，一个名为 jolly() 用于打印前三条消息，调用一次打印一条；另一个函数名为 deny() ，打印最后一条消息。</p></li><li><p>编写一个程序，生成以下输出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">Brazil, Russia, India, China<br>India, China<br>Brazil, Russia<br></code></pre></td></tr></table></figure><p>除了 main() 函数以外，该程序还要调用两个自定义的函数，一个名为 br() ，调用一次打印一次“Brazil, Russia”；另一个名为 ic()，调用一次打印一次“India，China”。其他内容在 main() 函数中完成。</p></li><li><p>编写一个程序，创建一个整形变量 toes，并将 toes 设置为10。程序还要计算toes的两倍和toes的平方。该程序打印三个值，分别描述以示区分。</p></li><li><p>许多研究表明，微笑益处多多。编写一个程序，生成以下格式的输出</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">Smile！Smile！Smile！<br>Smile！Smile！<br>Smile！<br></code></pre></td></tr></table></figure><p>该程序要定义一个函数，该函数被调用一次打印一次 “Smile！”，根据程序的需要使用该函数。</p></li><li><p>在C语言中，函数可以调用另一个函数。编写一个程序，调用一个名为 one_three() 的函数。该函数在一行打印单词“one”，再调用第二个函数 two() ，然后在另一行打印单词 “three”。two() 函数在一行显示单词 “two”。main() 函数在调用 one_three() 函数前要打印短语 “starting now：”，并在调用完毕后显示短语“done！”。因此该程序的输出应如下所示。</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">starting now：<br><span class="hljs-literal">one</span><br><span class="hljs-literal">two</span><br><span class="hljs-literal">three</span><br>done！<br></code></pre></td></tr></table></figure><hr></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>C语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/12/09/hello-world/"/>
    <url>/2022/12/09/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
